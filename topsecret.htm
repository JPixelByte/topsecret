



<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Top Secret Cipher Suite</title>
<link rel="icon" type="image/jpeg" sizes="200x200" href="images/cryptography_icon.jpg">
<link rel="stylesheet" href="topsecret.css">
  <!-- Font Awesome icons -->
    <link rel="stylesheet"   href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
</head>

<body>
<script src="https://cdn.jsdelivr.net/npm/gsap@3.12.7/dist/gsap.min.js"></script>

<button class="refresh" id="refresh" onClick="window.location.reload();" ><img src="images/refreshsymbol.jpg" 
  title="Refresh Page"></button>
  
<pre id="logo"></pre>
<h1>Top Secret 🗝️🔒🔑Cipher Suite</h1>
<h5>Top Secret 🗝️🔒🔑Cipher Suite</h5>

<!--Instruction modal popup-->
<button  id="instructions-btn" class="instructions-btn" aria-label="Show Instructions" >
        <i class="fas fa-question-circle fa-lg"></i>
      </button>

<form id="cipher-form">
<div>
  <svg width="24" height="24" class="copy message_copy" id="pattern" viewBox="0 0 24 24" tabindex="0" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- <svg width="24" height="24" class="copy message_copy" id="pattern" viewBox="0 0 24 24" tabindex="0" fill="none" xmlns="http://www.w3.org/2000/svg" onclick="copyMessage()"> -->
    <rect x="4" y="4" width="12" height="12" rx="2" stroke="#dc5c09" stroke-width="1" />
    <rect x="8" y="8" width="12" height="12" rx="2" stroke="#09B9DC" stroke-width="1" />
  </svg>

<div class="message-wrapper">
  <label for="text" class="sr-only">Enter message</label>
  <input type="text" class="message" name="text" placeholder="🗝️Enter message" required>
  <span class="clear" tabindex="0" onclick="clearMessageField()" onkeydown="if(event.key === 'Enter' || event.key === ' ') clearMessageField()">✖️</span>
  <!-- <span class="clear" tabindex="0" onclick="clearMessageField()">✖️</span> -->
</div>

<br />
<label for="cipher" class="sr-only">Select cipher type</label>
<select class="cipher" id="cipher-type" name="cipher" onchange="toggleShift()">
<option value="base64">b64: Base64</option>
<option value="binary">1011: Binary Code</option>
<option value="caesar">🗝️: Caesar Cipher</option>
<option value="matrix">👨‍💻: Matrix Cipher</option>
<option value="morse">..-: Morse Code</option>
<option value="nato">🆎: NATO Alphabet</option>

</select>

<label for="mode" class="sr-only">Select mode</label>
<select class="mode" name="mode">
<option value="encode">🔒Encode</option>
<option value="decode">🔓Decode</option>
</select>

<label for="shift_txt" id="shift_txt">Shift ⇅ Amount:</label>

<input type="number" id="shift_input" class="shift" name="shift" value="3" min="1"
required style="width:66px;margin-left:-1px; border:1px solid white">


<button type="submit" class="cipher_it" id="cipher_it" onmouseover="lightingSound()" onclick="lightingEffect()" aria-label="Cipher It">🔑Cipher It!</button>
<!-- <input type="submit" aria-label="Cipher It" id="cipher_it" class="cipher_it" value="🔑Cipher It!"> -->
</form>
<p id="result">Result: </p>
<div style="display: flex; justify-content: right; gap:2px; margin-top:2px;">
  <svg width="24" height="24" class="copy result_copy" id="pattern" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- <svg width="24" height="24" class="copy result_copy" id="pattern" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" onclick="copyResult()"> -->
  <rect x="4" y="4" width="12" height="12" rx="2" stroke="#09B9DC" stroke-width="1" />
  <rect x="8" y="8" width="12" height="12" rx="2" stroke="#dc5c09" stroke-width="1" />
</svg>


<canvas id='c' class="lightning_canvas"></canvas>
<svg id="lightning-bolt" class="lightning-bolt" viewBox="0 0 100 200" preserveAspectRatio="none">
  <path d="M 50 0 L 30 50 L 70 50 L 20 100 L 80 100 L 40 150 L 60 150 L 50 200" stroke="#e6bc30" stroke-width="5" fill="none" />
</svg>


<!-- <span class="copy result_copy">💾</span> -->

<!-- Start of: Background Image Thumbnails -->

<div class="bgImageThumbnails">
<img src="images/invert_icon.jpg" alt="Invert Image" class="thumbnails invert" id="invert" tabindex="0" onclick="invertImage()" onkeydown="if(event.key === 'Enter' || event.key === ' ') invertImage()" />
<img src="images/secretkey_icon.jpg" alt="Secret Key Image" class="thumbnails secret-key" id="secret_key"  tabindex="0" onclick="secretKey()" />
<img src="images/cryptography_icon.jpg" alt="Secret Key Image" class="thumbnails secret-key2" id="secret_key2"  tabindex="0" onclick="secretKey2()" />
<img src="images/alphabetsoup_icon.jpg" alt="Alphabet Soup Image" class="thumbnails alphabetsoup" id="alphabetsoup"  tabindex="0" onclick="alphabetSoup()" />

</div>
<!-- End of: Background Image Thumbnails -->

<!-- Start of: Background Audio -->
<div class="music_toggle">
<img src="images/equalizerbg.png" alt="music" id="music" class="equalizer" onclick="toggleMusic()"
onmouseover="martianFX()" />
</div>

<!-- End of: Background Audio -->

    <!-- Instructions Modal -->
    <div id="instructions-modal" class="instructions-modal">
      <div class="modal-content">
        <button class="close-btn" aria-label="Close Instructions">
          <i class="fa fa-times"></i>
        </button>
        <h2>How to use the Cipher Suite</h2>
        <div class="instructions-content">
          <ul class="no-bullets">
            <li>
              You have six forms of ciphers: Base64, Binary, Caesar, Matrix, Morse, Nato.
            </li>
            <li> On the initial page load, all forms fields are not displayed, but once you click Caesar and Matrix mode,
                 the shift label and input field are displayed.</li>

          <li>The copy buttons are the orange/blue squares up top, and the blue/orange squares down below.</li>
          <li>Caesar and Matrix require a 'shift amount', the rest do not!</li>
          <li>To encode a message: type in a message you want encrypted, select the form of encryption, make sure the encode dropdown is selected, and press the 'Cipher it!' button.</li>
          <li>To decode a message: use the copy button, or highlight text, right-click and select 'copy', paste that text you copied from the 'result:' textfield, make sure the dropdown is on 'decode', and press the 'Cipher it!' button.</li>
          <li>Base64: doesn't use a shift amount.</li>
          <li>Binary: doesn't use a shift amount.</li>
          <li>Caesar: requires a shift amount.</li>
          <li>Matrix: requires a shift amount.</li>
          <li>Morse: doesn't use a shift amount.</li>
          <li>Nato: doesn't use a shift amount.</li>

          </ul>
        </div>
      </div>
    </div>

<!-- Start of: Javascript -->
<script type="text/javascript">

//   Start of: Background Images
  let inverted = false
  let lightningEffect = document.querySelector('lightning_canvas');
  function invertImage() {
  inverted = !inverted
  halFX()
  if (!inverted) {
    document.getElementById("c").style.display = "none";
    document.body.style.backgroundColor = 'black'
    document.body.style.color ='white'
  } else {
    document.getElementById("c").style.display = "none";
    document.body.style.filter = 'none'
     document.body.style.color ='white'
   }
  }

function secretKey() {
  halFX();
  document.getElementById("c").style.display = "none";
  document.body.style.backgroundImage = "url('images/secretkey.jpg')";
  document.body.style.backgroundColor = 'transparent';
  document.body.style.color = 'white';
}

function secretKey2() {
  halFX();
  document.getElementById("c").style.display = "none";
  document.body.style.backgroundImage = "url('images/cryptography_large.jpg')";
  document.body.style.backgroundColor = 'transparent';
  document.body.style.color = 'black';
  result.style.color = 'white'; // Should work, but isn’t?
  result.style.backgroundColor = 'black';
}
function alphabetSoup() {
  halFX();
  document.getElementById("c").style.display = "none";
  document.body.style.backgroundImage = "url('images/alphabetsoup.jpg')";
  document.body.style.backgroundColor = 'transparent';
  document.body.style.color = 'white';
  result.style.color = 'white'; // Should work, but isn’t?
  result.style.backgroundColor = 'black';
}

//   Start of: Music
  let bgmusic = false

  let hal = new Audio()
  hal.src = './sounds/hal.mp3'

  let lighting = new Audio()
  lighting.src = './sounds/cipher_electricity.mp3'


  let martian = new Audio()
  martian.src = './sounds/martian.mp3'

  let space = new Audio()
  space.src = './sounds/space.mp3'

  function toggleMusic() {
    martian.play()
    bgmusic = !bgmusic
    space.play()
    if (!bgmusic) {
    space.pause()
      }
  }

  // Start of: Lightning

  function lightingSound() {
    let message = document.querySelector('.message');
    message.style.backgroundColor = 'white'
    lighting.play()
  }

  function createSparks(container, numSparks) {
    const spawnWave = (waveCount, delay, isBigSpark) => {
        setTimeout(() => {
            for (let i = 0; i < waveCount; i++) {
                let spark = document.createElement('span');
                spark.classList.add('spark');
                spark.classList.add(isBigSpark ? 'spark-big' : 'spark-tiny'); // Newly added
                // Spawn along the top border
                spark.style.left = Math.random() * 100 + '%';
                spark.style.top = '12px';
                // Random size based on type
                const size = isBigSpark ? (Math.random() * 3 + 16) : (Math.random() * 1 + 1);
                spark.style.width = `${size}px`;
                spark.style.height = `${size}px`;
                // Super fast animation
                const duration = isBigSpark ? (Math.random() * 0.05 + 0.05) : (Math.random() * 0.03 + 0.03); // 0.05-0.1s for big, 0.03-0.06s for tiny
                spark.style.animationDuration = `${duration}s`;
                // Random direction
                const directionX = (Math.random() - 0.5) * 50;
                const directionY = (Math.random() - 0.5) * 50;
                spark.style.setProperty('--end-x', `${directionX}%`);
                spark.style.setProperty('--end-y', `${directionY}%`);
                // Random color variation
                const hue = Math.random() * 60 + 180; // Cyan to white
                spark.style.background ='yellow' + `hsl(${hue}, 100%, 50%) + 'yellow'`;
                // spark.style.webkitFilter = "blur(1px)";
                spark.style.border = `2px solid black`;
                spark.style.boxShadow = `0 0 10px hsl(${hue}, 100%, 50%), 0 0 15px #ffffff`;
                container.appendChild(spark);
                // Remove after animation
                setTimeout(() => spark.remove(), duration * 1000);
            }
        }, delay);
    };

    // Background flash THIS DOESN'T DO ANYTHING
    // container.style.transition = 'background-color 0.05s';
    // container.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
    // setTimeout(() => container.style.backgroundColor = 'transparent', 50);

    // More intense waves
    spawnWave(10, 0, true);    // Big sparks: 10
    spawnWave(20, 0, false);   // Tiny zaps: 20
    spawnWave(10, 20, true);   // Big sparks: 10
    spawnWave(20, 20, false);  // Tiny zaps: 20
    spawnWave(10, 40, true);   // Big sparks: 10
    spawnWave(20, 40, false);  // Tiny zaps: 20
}



function lightingEffect() {
  
  let lightningEffect = document.querySelector('lightning_canvas');
  let electricity_bolt = document.getElementById("c");
  document.getElementById("c").style.display = "block";
  setTimeout(() => electricity_bolt .style.display = 'none', 1000)
 
    // Lightning bolt
    const lightning = document.getElementById('lightning-bolt');
 

    if (lightning) {
      
        lightning.classList.add('lightning_show');
        setTimeout(() => {
            lightning.classList.remove('lightning_show');
        }, 800); // 0.8 seconds
    } else {
        // console.error("Lightning bolt element not found!");
    }

    // White flashes and particle explosion
    let message = document.querySelector('.message');
    let messageContainer = document.querySelector('.message-wrapper'); // Corrected selector
    if (message) {
        setTimeout(() => {
       // First flash: black → white → black (100ms)
            message.style.setProperty('background', 'white', 'important');

            setTimeout(() => {
                message.style.setProperty('background', 'black', 'important');
                // Second flash: black → white → black (100ms)
                setTimeout(() => {
                    message.style.setProperty('background', 'white', 'important');

                    setTimeout(() => {
                        message.style.setProperty('background', 'black', 'important');
                      
                    }, 100); // Second flash duration
                }, 100); // Delay between flashes
            }, 100); // First flash duration

            // Particle electric explosion at 400ms (when lightning bolt connects)
            setTimeout(() => {
                if (messageContainer) {
                    createSparks(messageContainer, 40); // 10 sparks for the explosion
             
                }
            }, 400); // At 0.4 seconds (50% of 0.8s)

            // Check final state
            //  lightningEffect.classList.add('lightning_canvas_show')
            // setTimeout(() => {
            //     lightningEffect.classList.remove('lightning_canvas_show')
            // }, 1000);
        }, 0);
    } 

    // Rest of the function
    let result = document.querySelector('.result');
    let resultContainer = document.querySelector('.result-container');
    if (result) {
        setTimeout(() => {
            result.classList.remove('electric');
            void result.offsetWidth;
            result.classList.add('electric');
            if (resultContainer) {
                createSparks(resultContainer, 10);
            }
        }, 250);
    }

    if (message && result) {
        let inputText = message.value;
        let cipheredText = cipherFunction(inputText);
        result.textContent = cipheredText;
    }
}


  function halFX() {
    hal.play()
  }
function toggleShift() {
    const message = document.getElementsByClassName('message')[0]; // First message element
    const cipher = document.getElementById('cipher-type').value;
    const shiftLabel = document.getElementById('shift_txt');
    const shiftInput = document.getElementById('shift_input');

    if (cipher === 'caesar' || cipher === 'matrix') {
      shiftLabel.style.opacity = '1'; // Fully visible
      shiftInput.style.opacity = '1'; // Fully visible
      shiftLabel.style.pointerEvents = 'auto'; // Ensure clickable
      shiftInput.style.pointerEvents = 'auto';
    } else {
      shiftLabel.style.opacity = '0'; // Hidden but still in layout
      shiftInput.style.opacity = '0'; // Hidden but still in layout
      shiftLabel.style.pointerEvents = 'none'; // Disable interaction
      shiftInput.style.pointerEvents = 'none';
    }
}

window.addEventListener('resize', function(event) {
  document.getElementById("c").style.display = "none";
}, true);

window.onload = function() {
    toggleShift(); // Runs on load with current cipher value (e.g., default Base64)
    window.addEventListener('resize', toggleShift); // Re-run on window resize (e.g., DevTools slider)
};
</script>



<!-- Lighting Canvas -->
<canvas id='c' class="lightning_canvas"></canvas>


<!-- GSAP Animnations -->
<script src='scripts/gsap.min.js'></script>
<script src="scripts/mouserollover.js"></script>

<!-- Top Secret Cipher Suite -->
<script src="topsecret.js"></script>
<script src="scripts/instructions.js"></script>

<!-- New Lighting Animation -->
 <script src='https://rawgit.com/akm2/simplex-noise.js/master/simplex-noise.js'></script>
 <script  src="scripts/lightning.js"></script>

</body>
</html>

<!--
Credits: 
My buddy Grok from X
If we get the lighting to work?
Source Code:
https://www.youtube.com/watch?v=SkbqDzux_LM 

-->
